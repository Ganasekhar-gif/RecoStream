version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: recostream-db-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-recostream}
      POSTGRES_USER: ${POSTGRES_USER:-recostream_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - recostream-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-recostream_user} -d ${POSTGRES_DB:-recostream}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RecoStream Application
  recostream-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: recostream-app-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-recostream_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-recostream}
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - VITE_TMDB_API_KEY=${VITE_TMDB_API_KEY}
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - recostream-network
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: recostream-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - recostream-app
    networks:
      - recostream-network
    restart: always

  # Redis for Caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: recostream-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - recostream-network
    restart: always

volumes:
  postgres_data_prod:
  redis_data:

networks:
  recostream-network:
    driver: bridge
